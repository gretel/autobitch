#!/usr/bin/env bash
#
# -*- mode: bash; coding:utf-8; tab-width: 4; indent-tabs-mode: nil; -*-
# https://github.com/gretel/automagic
# tom hensel <github@jitter.eu> 2016

_check_exec() {
    if ! test -x "$1"; then
        log_error "â§„ file '${1}' is expected to be executable."; return 1
    fi
}

use_homebrew() {
    local hb_path="$1"
    PATH_add "$hb_path/bin"
    export HOMEBREW_PATH="$hb_path"
    local hb_sbin="$hb_path/sbin"
    test -d "$hb_sbin" && PATH_add "$hb_sbin"
}

use_bundler() {
    local bundler_dir="$1"
    local bundler_bin_dir="$bundler_dir/bin"
    _check_exec "$bundler_bin_dir/bundler" || return 1
    export BUNDLE_BIN="$bundler_bin_dir"
    PATH_add "$bundler_bin_dir"
}

# TODO: sync with direnv.stdlib
use_node_mini() {
    local node_path="$1"
    export NODE_HOME="$node_path"
    export NODE_PATH="$node_path/lib/node_modules"
}

# TODO: sync with direnv.stdlib
use_go() {
    local go_dir="$1"
    local go_path="$go_dir/.go"
    export GOPATH="$go_path"
    local go_path_bin="$go_dir/.go/bin"
    PATH_add "$go_path_bin"
    local go_bin_dir="$PREFIX/opt/go/libexec/bin"
    _check_exec "$go_bin_dir/go" || return 1
    PATH_add "$go_bin_dir"
}

use_ansible() {
    local ansible_path="$1"
    export ANSIBLE_HOME="$ansible_path"
    local script="$ansible_path/hacking/env-setup"
    _check_exec "$script" || return 1
    # shellcheck source=/dev/null
    source "$script" > /dev/null
}

### direnv

# python version manager
export PYENV_ROOT="$HOME/.pyenv"

# ruby version manager
export RY_RUBIES="$HOME/.rubies"

# argument: prefix of installtion
use homebrew "${PREFIX-/usr/local}"
use node_mini "${PREFIX-/usr/local}"
use go "$HOME"

### automagic

# prevent one line of verbose logging
export DIRENV_LOG_FORMAT=""

use_auto() {
    ### include logic
    source_env "$HOME/.automagic"

    ### decorate log output
    ### comment out to skip logging for '.direnvrc'
    auto_log_prefix "$(expand_path "$1")"
}
