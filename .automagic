#!/usr/bin/env bash
#
# -*- mode: bash; coding:utf-8; tab-width: 4; indent-tabs-mode: nil; -*-
# https://github.com/gretel/automagic
# tom hensel <github@jitter.eu> 2016

# pyenv: : the layout pyenv supposes (~/.pyenv)
#  wraps around pyenv and therefore requires it
layout_pyenv() {
    check_dir "${PYENV_ROOT}" || return 1
    local py_ver="$1"
    check_string "${py_ver}" || return 1
    if ! command -v pyenv >/dev/null; then
        log_error "⧄ could not find pyenv in PATH!"; return 2
    fi
    # initialize pyenv
    eval "$(pyenv init -)"
    # call pyenv to change the environment
    if ! pyenv shell "${py_ver}"; then
        log_error "⧄ calling 'pyenv shell ${py_ver}' failed!"; return 2
    fi
    # prevent pyenv from ever changing the prompt
    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
    # common
    _ready_python
}

# pyenv_less: the layout pyenv supposes (~/.pyenv)
#   but don't actually require or call pyenv
layout_pyenv_less() {
    check_dir "${PYENV_ROOT}" || return 1
    # cleanup
    local python_ver="$1"
    check_string "${python_ver}" || return 1
    # emulate pyenv
    export PYENV_VERSION="${python_ver}"
    # pyenv uses wrapper to support switching versions
    local python_shims="${HOME}/.pyenv/shims"
    PATH_add "${python_shims}"
    # base path of python installation
    local python_dir="${HOME}/.pyenv/versions/${python_ver}"
    check_dir "${python_dir}" || return 1
    # python interpreter
    local python_bin_dir="${python_dir}/bin"
    check_exec "${python_bin_dir}/python" || return 1
    PATH_add "${python_bin_dir}"
    # and it's manpages
    path_add MANPATH "${python_dir}/share/man"
    # # FIXME: static
    # export PYTHONPATH="${python_dir}/lib/python3.5/site-packages"
    # common
    _ready_python
}

# layout_virtualenv: name is bit ambigious - it's does not require virtualenv
# nor in particular the 'activate' script it puts into the virtualenv
# it is emulated here closely - should be very compatible
layout_virtualenv() {
    # cleanup
    unset PYENV_VERSION
    unset PYTHONPATH
    if test -z "${PYTHONHOME+_}"; then
        unset PYTHONHOME
    fi
    local venv_path="${1}"
    check_string "${venv_path}" || return 1
    # it's all about VIRTUAL_ENV
    export VIRTUAL_ENV="${venv_path}"
    # add it's binaries to PATH
    PATH_add "${venv_path}/bin"
    # common
    _ready_python
}

_ready_python() {
    # sanitize alias
    alias pydoc=
    pydoc () {
        python -m pydoc "$@"
    }
    # if there is a pythonrc file use it
    local python_rc_file
    if python_rc_file="${HOME}/.python/pythonrc.py"; then
        export PYTHONSTARTUP="${python_rc_file}"
    fi
    # if there is no history file create it
    export PYTHON_HISTORY_FILE
    if ! PYTHON_HISTORY_FILE="${HOME}/.python_history"; then
        touch "${PYTHON_HISTORY_FILE}"
    fi
}


# layout_ry
layout_ry() {
    check_dir "${RY_RUBIES}" || return 1
    # ry sets symlinks to the selected ruby version
    # therfore, it will only work if these are in PATH
    local ry_shims="${PREFIX}/lib/ry/current/bin"
    check_dir "${ry_shims}" || return 1
    PATH_add "${ry_shims}"
    local ruby_ver="$1"
    check_string "${ruby_ver}" || return 1
    local ruby_bin
    # if a ruby is found in the local bin - try to use it
    # in ry terms this is called 'shell-local ruby'
    ruby_bin="${PWD}/bin/ruby"
    if test -x "${ruby_bin}"; then
        # use ry to resolve path
        PATH_add "${ruby_bin}"
    else
        # use ry to resolve the path to the selected version
        ruby_bin="$(ry binpath "${ruby_ver}")"
        PATH_add "${ruby_bin}"
    fi
}

# layout_rubies: emulate common layout used by chruby (~/.rubies, ~/.gem)
layout_rubies() {
    # TODO: abstraction, non-standard
    check_dir "${HOME}/.rubies" || return 1
    local ruby_ver="$1"
    check_string "${ruby_ver}" || return 1
    # home of the ruby installation
    local ruby_dir="${HOME}/.rubies/ruby-${ruby_ver}"
    check_string "${ruby_ver}" && check_dir "${ruby_dir}" || return 1
    export RUBY_HOME="${ruby_dir}"
    # and it's binaries
    local ruby_dir_bin="${ruby_dir}/bin"
    check_exec "${ruby_dir_bin}/ruby" && check_exec "${ruby_dir_bin}/gem" || return 1
    PATH_add "${ruby_dir_bin}"
    # as well as the manpages it brings
    local ruby_man_dir="${ruby_dir}/share/man"
    check_dir "${ruby_man_dir}" || return 1
    path_add MANPATH "${ruby_man_dir}"
}

use_auto_ruby () {
    local rb_string
    local rb_ver
    local rb_which
    # TODO: abstraction
    local rbver_file="${PWD}/.ruby-version"
    if rb_ver=$(gather_file "${rbver_file}"); then
        log_status "⚑ ruby ${rb_ver} required in {$(user_rel_path "${rbver_file}")}"
        # TODO: abstraction, switching
        # layout rubies "${rb_ver}"
        layout ry "${rb_ver}"
    fi
    if rb_which="$(which ruby)"; then
        # TODO: use version for comparison
        rb_string=( $(expect_usage "${rb_which} -v" "ruby") )
        log_status "$(tput bold)✓$(tput sgr0) ruby ${rb_string[1]} at {$(user_rel_path "${rb_which}")}"
    else
        # fail
        log_error "⁈ expected ruby at '${rb_which}' to be in PATH!"
    fi
}

use_auto_python () {
    local py_string
    local py_which
    # TODO: abstraction
    local py_ver_file="${PWD}/.python-version"
    local py_ver
    if py_ver=$(gather_file "${py_ver_file}"); then
        log_status "⚑ python ${py_ver} required in {$(user_rel_path "${py_ver_file}")}"
        # layout pyenv_less "${py_ver}"
        layout pyenv "${py_ver}"
        # TODO: check if venv and bin path match
    # check for local virtualenv
    elif test -f "${PWD}/bin/activate"; then
        local venv_path="${PWD}"
        log_status "⚑ python virtualenv at {$(user_rel_path "${venv_path}")}"
        layout virtualenv "${venv_path}"
    fi
    # in PATH?
    py_which="$(which python)"
    if test -x "${py_which}"; then
        local py_string
        py_string=( $(expect_usage "${py_which} -V" "Python ${py_ver}") ) || return 1
        log_status "$(tput bold)✓$(tput sgr0) python ${py_string[1]} at {$(user_rel_path "${py_which}")}"
    else
        # fail
        log_error "⁈ expected python at '${py_which}' to be in PATH!"
    fi
}


check_string() {
    if test -z "$1"; then
        log_error "⧄ argument is expected to be passed."; return 1
    fi
}

check_dir() {
    if ! test -d "$1"; then
        log_error "⧄ path '${1}' is expected to exist."; return 1
    fi
}

check_exec() {
    if ! test -x "$1"; then
        log_error "⧄ file '${1}' is expected to be executable."; return 1
    fi
}

gather_file() {
    test -f "$1" || return 1;
    OLDIFS="$IFS"
    IFS="${IFS}"$'\r'
    wrds=( $(cut -b 1-1024 "$1") )
    IFS="$OLDIFS"
    echo "${wrds[0]}"
}

expect_usage() {
    local bin="$1"
    local should="$2"
    local result
    result=$(${bin} 2>&1)
    case "${result}" in
        *"$should"*)
            echo "${result}"
            return 0
            ;;
        '')
            log_error "⧄ could not find executable in PATH!"
            return 1
            ;;
        *)
            log_error "⧄ expected output of '${bin}' to match '${should}' but got '${result}'!"
            return 1
            ;;
    esac
}

get_abbrv_pwd() {
    cwd="$(user_rel_path "$1")"
    base="${cwd##*/}"
    dir="${cwd%/*}"
    echo "${dir##*/}/$base"
}

auto_log_prefix() {
    local cwd
    cwd="$(get_abbrv_pwd "$1")"
    export DIRENV_LOG_FORMAT
    DIRENV_LOG_FORMAT=" $(tput setaf 8)[${cwd}]$(tput sgr0) $(tput setaf 7)%s$(tput sgr0)"
}

### end
